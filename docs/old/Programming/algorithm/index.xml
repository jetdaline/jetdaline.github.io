<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序算法 on IWiki</title>
    <link>https://ardadata.github.io/docs/old/Programming/algorithm/</link>
    <description>Recent content in 程序算法 on IWiki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 07 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ardadata.github.io/docs/old/Programming/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>时间复杂度</title>
      <link>https://ardadata.github.io/docs/old/Programming/algorithm/time-complexity/</link>
      <pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ardadata.github.io/docs/old/Programming/algorithm/time-complexity/</guid>
      <description>时间复杂度#算法的效率#由以下两个复杂度来评估，算法主要研究的是时间复杂度 时间复杂度：评估执行程序所需的时间。 空间复杂度：评估执行程序所需的存储空间。 时间频度#算法花费的时间与算法中语句的执行次数成正比 一个算法中语句的执行次数，称为时间频度，记为 T(n) 时间复杂度#是一个关于输入数据量 n 的函数，定量描述了该算法所需的最大运行时间 记作 T(n)=O(f(n))，表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同 n：问题规模 f(n)：是 n 的某个函数 T(n)：算法中语句总的执行次数，是 n 的某个函数 推导时间复杂度#复杂度与具体的常系数无关
多项式级的复杂度相加的时候，只保留最高阶项
示例：T(n) = 2n²+7n+6=&amp;gt; T(n) = 2n²+7n+1=&amp;gt; T(n) = 2n²=&amp;gt; T(n) = n²记为 O(n²) 常见时间复杂度#O(1) &amp;lt; O(logn) &amp;lt; O(n) &amp;lt; O(nlogn)&amp;lt; O(n²) &amp;lt; O(n³ ) &amp;lt; O(2ⁿ ) &amp;lt; O(n!) &amp;lt; O(nⁿ ) 常数阶：O(1)#int i=1; int j=2; ++i; j++; int m=i+j; 对数阶：O(logn)#int i=1; while(i&amp;lt;n){ i=i*2; } 线性阶：O(n)#for(int i=1;i&amp;lt;=n;i++){ j=i; j++; } 线性对数阶：O(nlogn)#for(int m=1;m&amp;lt;=n;m++){ int i=1; while(i&amp;lt;n){ i=i*2; } } 平方阶：O(n²)#for(int i=1;i&amp;lt;=n;i++){ for(int j=1;j&amp;lt;=n;j++){ total+=j; } } </description>
    </item>
    
  </channel>
</rss>
